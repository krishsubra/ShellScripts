#!/bin/bash
#
###################################################################################################################################################
# NAME 		:			Linux_health_cheker.bsh
# PURPOSE	:			Scanning the server for SCB standards, any potential problems, configuration mismatch
# Authors	    : 			Krishnan Subramanian , Prabhu Mahendra C
# Version 	    : 			2.0
# Feedback  	:			Please send bug reports to authors (1470734, 1469541)
#
# Modules 	:  hardware, disks, network, services, rootid, swap, fs, io_spof, vxlic, nss, vcs, resolver,nic   ::: Krishnan Subramanian
# Modules 	:  yum, NIS,NFS,software,sudo, NTP,seatfile, dump,monitoring,sysinfo			                     ::: Prabhu Mahendra
#####################################################################################################################################################
##
#	Current scope :
#
#############################################
### 
export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/openssh/bin:/opt/dell/srvadmin/bin:/opt/DynamicLinkManager/bin:/opt/dell/srvadmin/sbin:/opt/VRTSvcs/bin:/opt/VRTS/bin
SCRIPTPID=$(echo $$)
### Check for UID running the script, should be root 
ID=$(id -u)
if [ $ID -ne 0 ] ; then
	echo "This script must be run as root!!!"
	exit 1
fi
##
#
HOSTNAME=$(hostname)
## Check for OS release
if [ "$(uname)" = "Linux" ]; then
		RHELVERSION=$(awk ' { print $(NF-1) }' /etc/redhat-release )
        if dmidecode | grep 'Product Name' | grep 'VMware' > /dev/null ; then
                vmguest=1
        else
                vmguest=0
        fi
else
		echo " Platform is not Linux, Exiting " 
		exit 1
fi
##########
pass()
{
echo -e "\033[32m [ PASS ]\033[0m $1"
}
fail()
{
echo -e "\033[35m [ FAIL ]\033[0m $1"
}
info()
{
echo -e "\033[34m [ INFO ]\033[0m $1"
}
#####################
info :"${HOSTNAME} : RHEL VERSION : ${RHELVERSION}"
####################
hardware()
{
local MODULE=hardware
if [ $vmguest = 1 ]; then
        pass :" ${HOSTNAME} : Virtual Server: YES"
        pass :" ${MODULE} : OMSA  : NO "
        exit
else
        fail :" ${MODULE} : Virtual Server: NO"
fi
# Server Model
servermodel=$(dmidecode | grep -i poweredge | head -1 | awk -F: ' { print $2 }')
echo " ${MODULE} : HARDWARE : $servermodel "
#
OMREPORT=$(which omreport) ; export OMREPORT
RACADM=$(which racadm) ; export RACADM

if [ ! -x $OMREPORT ] ; then
        exit
fi
# Check for OMSA version
OMSAVER=$(omreport about | awk -F: '/Version/{ print $2 }')
        echo " ${MODULE} : OMSA VERSION : ${OMSAVER} "
#
# Check for Firmware
#
unset dell_firmware
${OMREPORT} system version  | egrep -i 'Name|Version' | awk ' {print $3 }' | awk 'NF > 0' > firmware.txt
while read -r line; do dell_firmware+=("$line"); done < firmware.txt
        echo  " ${MODULE} : "${dell_firmware[0]}" : ${dell_firmware[1]}"
        echo  " ${MODULE} : "${dell_firmware[2]}" : ${dell_firmware[3]}"
        echo  " ${MODULE} : "${dell_firmware[4]}" : ${dell_firmware[5]}"
        echo  " ${MODULE} : "${dell_firmware[10]}" : ${dell_firmware[11]}"
#
# Check for RAID layout
RAIDLAYOUT=$(${OMREPORT} storage vdisk controller=0 vdisk=0 | grep Layout | cut -d: -f2)

if [ $RAIDLAYOUT != "RAID-1" ] ; then
        echo " ${MODULE} : OS Disk Mirror : FAIL "
else
        echo " ${MODULE} : OS Disk Mirror : PASS "
fi
# 
# Check for health of OS disks
# 
DISKSTAT=$(omreport storage pdisk controller=0 |  grep -i state | awk -F: ' { print $NF }' | sed -e 's/ //' | xargs)
if [ $(echo $DISKSTAT | grep -vi online | wc -l) -eq 0 ] ; then
	echo " ${MODULE} : Root disks : PASS"
else
	echo " ${MODULE}: Root disks : FAIL "
fi
#
# Check for console redirection
CONSOLEREDIRECTION=$(${OMREPORT} chassis biossetup -fmt ssv | grep '^Serial Communications*;' | cut -d\; -f2 | grep On)
if [ "${CONSOLEREDIRECTION}" != "On with Console Redirection" ] ; then
        echo " ${MODULE} : Console Redirection : FAIL "
else
        echo " ${MODULE} : Console Redirection : PASS "
fi
# Check for console allow
s_tty='ttyS[01]'
if [ -n "$(grep "^${s_tty}$" /etc/securetty)" ]; then
        echo " ${MODULE} : Console securetty : PASS"
else
        echo " ${MODULE} : Console securetty : FAIL"
fi
#
# Splash image
#
if [ -n "$(grep '^splashimage=' /boot/grub/grub.conf)" ]; then
        echo "  ${MODULE} : Splashimage : PASS "
else
        echo "  ${MODULE} : Splashimage : FAIL "
fi
# IDRAC SSH check
if [ -x ${RACADM} ]; then
        idrac_ssh_enable=$(racadm getconfig -g cfgSerial -o cfgSerialSshEnable )
        if [ "${idrac_ssh_enable}" = 1 ] ; then
                echo " ${MODULE} : IDRAC SSH : PASS "
        else
                echo " ${MODULE} : IDRAC SSH : FAIL "
        fi
fi
# Internal disks - Raid check
internal_disk_raid=$(${OMREPORT} storage vdisk -fmt ssv | sed -n 's|^.*;\(RAID-[0-9][0-9]*\).*/dev/\([^;]*\).*$|\1;\2|p' | awk -F\; ' { print $1";"$2 }')
internal_disk_raid_count=$(echo "$internal_disk_raid" | wc -l)
if [ ${internal_disk_raid_count} -gt 0 ] ; then
        err=0
        for D in $internal_disk_raid
        do
                disk=$(echo $D | awk -F';' ' { print $2}' )
                raid_type=$(echo $D | awk -F';' ' { print $1}')
                if  ! echo $raid_type | grep '[15]'  > /dev/null; then
                        err=1
                fi
        done
        if [ $err -eq 0 ] ; then
                echo " ${MODULE} : INTERNAL RAID : PASS "
        else
                echo " ${MODULE} : INTERNAL RAID : FAIL "
        fi
fi
}
monitoring()
{
local MODULE=monitoring
#TO CHECK PATROL PACKAGE IS INSTALLED ON THE SYSTEMS OR NOT
PATROL_CHK=$(/sbin/chkconfig --list |grep -i patrolagent | awk ' /3:on/ {print 1}')
PATROL_INST=$(rpm -q SCBmonitorPatrol |grep -v not  | awk '{print 2}')
PATROL_ID=$( grep -v '^!' /opt/bmc/patrol/Patrol3/lib/config.default | grep "/AgentSetup/defaultAccount" | awk '{print $4}' | awk -F"=" '{print $2}' | awk -F"\"" '{print $2}' | awk -F"/" '{print $1}')
if [ $PATROL_INST=2 ] && [ "$PATROL_CHK"=1 ] && [ "$PATROL_ID"="patrol" ];
then
        echo " ${MODULE} : Patrol Installed: PASS"
else
        echo " ${MODULE} : Patrol Installed: FAIL"
fi
#
#TO CHECK PATROL bgsagent PROCESS IS RUNNING OR NOT
#
PATROL_BSA=$( ps -ef |grep -i bgsagent |grep -v grep | awk '{print $3}')
PATROL_NS1=$(netstat -an |grep -i 6767 | awk '{print 4}')
if [ $PATROL_BSA=3 ] && [ $PATROL_NS1=4 ];
then
        echo " ${MODULE} : Patrol BSA Running: PASS"
else
        echo " ${MODULE} : Patrol BSA Running: FAIL"
fi
#
#TO CHECK PATROL PROCESS IS RUNNING OR NOT
#
PATROL_PS=$( ps -ef |grep -i patrol |grep -i 3181 |grep -v grep | awk '{print 5}')
PATROL_NS2=$(netstat -an |grep -i 3181 | awk '{print 6}')
if [ "$PATROL_PS"="5" ] && [ "$PATROL_NS2"="6" ];
then
        echo " ${MODULE} : Patrol Running: PASS"
else
        echo " ${MODULE} : Patrol Running: FAIL"
fi
#
#TO CHECK ITRS PACKAGE IS INSTALLED ON THE SYSTEMS OR NOT
#
ITRS_CHK=$(/sbin/chkconfig --list |grep -i itrs | awk ' /3:on/ {print 1}')
ITRS_INST=$(rpm -q SCBitrs |grep -v not  | awk '{print 2}')
if [ $ITRS_INST=2 ] && [ $ITRS_CHK=1 ];
then
        echo " ${MODULE} : ITRS Installed: PASS"
else
        echo " ${MODULE} : ITRS Installed: FAIL"
fi
#
#TO CHECK ITRS PROCESS IS RUNNING OR NOT
#
ITRS_PS=$( ps -ef |grep -i itrs |grep -i netprobe |grep -v grep | awk '{print $3}')
ITRS_NS=$(netstat -an |grep -i 7036 |grep LISTEN |grep -v grep | awk '{print $4}')
if [ $ITRS_PS=3 ] && [ $ITRS_NS=4 ];
then
        echo " ${MODULE} : ITRS Running: PASS"
else
        echo " ${MODULE} : ITRS Running: FAIL"
fi
#
}
kdump_coredump()
{
MODULE=DUMP
#
#TO CHECK COREDUMP  PATTERN IS SET CORRECT OR NOT
#
EXP_COREPATTERN='core.%e.%t'
SYS_COREPATTERN=$( cat /proc/sys/kernel/core_pattern| grep -v '^|')
if [ "$SYS_COREPATTERN" = "$EXP_COREPATTERN" ];
then
        echo " ${MODULE} : Coredump Pattern: PASS"
else
        echo " ${MODULE} : Coredump Pattern: FAIL"
fi
#
#TO CHECK KDUMP IS RUNNIGN AT RUN LEVEL 3
#
KDUMP_RUN=$(/sbin/chkconfig --list |grep -i kdump | awk ' /3:on/ {print 1}')
if [ "$KDUMP_RUN" = "1" ];
then
        echo " ${MODULE} : Kdump Autostart: PASS"
else
        echo " ${MODULE} : Kdump Autostart: FAIL"
fi
#
#TO CHECK DEDICATED KDUMP FILESYSTEM CONFIGURED
#
CRASH_FS=$(mount |grep -i crash | awk ' /\/var\/crash/ {print 2}')
if [ "$CRASH_FS" = "2" ];
then
        echo " ${MODULE} : Dedicated Kdump FS: PASS"
else
        echo " ${MODULE} : Dedicated Kdump FS: FAIL"
fi
#
#TO CHECK DUMP ENTRY EXISTS IN GRUB.CONF FILE
#
if [ ${RHELVERSION%.*} -ge 6 ]; then
        DUMPBOOT_PARAM="crashkernel=(auto|128M)"
    else
        DUMPBOOT_PARAM="crashkernel=128M@32M"
fi
DUMP_BP=$(cat /etc/grub.conf |grep $DUMPBOOT_PARAM | head -1 | awk '{print 3}')
if [ "$DUMP_BP" = "3" ];
then
        echo " ${MODULE} : Dump Entry in Grub: PASS"
else
        echo " ${MODULE} : Dump Entry in Grub: FAIL"
fi
#
#TO CHECK KDUMP UTILITY IS INSTALLED
KDUMP_REQ_KERNEL="2.7.18"
RUN_KERNEL=$( uname -r | cut -d- -f1 )
if [ "$(echo $RUN_KERNEL $KDUMP_REQ_KERNEL | xargs -n 1 | sort -t . -n -r +0 -1 +1 -2 +2 -3 | tail -1 )" = $KDUMP_REQ_KERNEL ]; then
    if ! rpm -q kexec-tools > /dev/null ; then
                echo " ${MODULE} : Kdump Utility Installation: FAIL"
    else
                echo " ${MODULE} : Kdump Utility Installation: PASS"
        sys_core_dump_util=kdump
fi
else
    sys_core_dump_util=diskdump
                echo " ${MODULE} : Kdump Utility Installation: FAIL"
fi
}
swap()
{
local MODULE=swap
# Physical memory and Swap memory calculated in MB "
PHYSMEM=$(dmidecode | grep 'Size' | grep MB | awk '{sum+=$2} ; END {print sum;}')
SWAPMEM=$(swapon -s | grep '^/' | awk '{sum+=$3} ; END {print sum/1024;}')
if [ $vmguest -eq 1 ] ; then
        swaprequired=3
elif [ $PHYSMEM -le 2048 ] ; then
        swaprequired=$(($PHYSMEM*2))
elif [ $PHYSMEM -le 8192 ] ; then
        swaprequired=$(($PHYSMEM*3/2))
else
        swaprequired=$((8*1024))
fi

if [ $SWAPMEM -lt $swaprequired ] ; then
        echo "${MODULE} : SWAP SIZE : FAIL "
else
        echo "${MODULE} : SWAP SIZE : PASS "
fi
}
NIS()
{
local MODULE=NIS
#  TO CHECK NIS IS CONFIGURED
#
NIS_DOMAIN=`grep '^NISDOMAIN=' /etc/sysconfig/network | cut -d= -f2`
if [ ! -n "$NIS_DOMAIN" ]; then
        echo " ${MODULE} : NIS CONFIGURED: FAIL"
        echo " ${MODULE} : NIS RUNNING: FAIL"
        echo " ${MODULE} : YPSERV Running: FAIL"
        echo " ${MODULE} : ypserver IP in /etc/hosts: FAIL"
    exit
        else
        echo " ${MODULE} : NIS CONFIGURED: PASS"
fi
#
#  TO CHECK NIS IS RUNNING
if [ ! -n "`ypwhich 2> /dev/null`" ]; then
    #info "NIS not running, check skipped"
        echo " ${MODULE} : NIS RUNNING: FAIL"
        echo " ${MODULE} : YPSERV Running: FAIL"
        echo " ${MODULE} : ypserver IP in /etc/hosts: FAIL"
    exit
        else
                echo " ${MODULE} : NIS RUNNING: PASS"
fi
#  TO CHECK YPSERV IS RUNNING
if ps -ef | grep ypserv | grep -v grep> /dev/null;
then
        echo " ${MODULE} : YPSERV Running: PASS"
else
        echo " ${MODULE} : YPSERV Running: FAIL"
fi
#
#  TO CHECK NIS SLAVE IP IS AVAILABEL IN /ETC/HOSTS FILE
#
YPSERVER_EXI=`sed -n "/^domain\s*${NIS_DOMAIN}\s*server\s*/s/.*server\s*\(.*$\)/\1/p" /etc/yp.conf | xargs`
YPSERVER_HOST=$(grep $YPSERVER_EXI /etc/hosts | head -1 | awk '{print 1}')
if [ "$YPSERVER_HOST" = "1" ];
then
        echo " ${MODULE} : ypserver IP in /etc/hosts: PASS"
else
        echo " ${MODULE} : ypserver IP in /etc/hosts: FAIL"
fi
}
services()
{
local MODULE=services
# Openssh / ssh check for pre RHEL 5.8
case "$RHELVERSION" in
4.*|5.[1-7])
    if [ ! $(chkconfig --list opensshd 2> /dev/null | awk '/$3:on/ {print $1}') ] ; then
            echo " ${MODULE} : OPENSSH - PRE RHEL 5.8 : PASS "
    elif [ $(chkconfig --list sshd 2> /dev/null | awk '/$3:on/ {print $1}') ] ; then
            echo " ${MODULE} : OPENSSH - PRE RHEL 5.8 : FAIL "
    fi
    ;;
*          )
        echo " ${MODULE} : SSH CHECK : PASS "
esac
# Check for NFSD ==> Exceptions are to be signed off
if ps -ef |grep nfsd |grep -v grep > /dev/null ; then
        echo " ${MODULE} : NFSD IS NOT RUNNING : FAIL "
else
        echo " ${MODULE} : NFSD IS NOT RUNNING : PASS "
fi
## CFEngine check ==> should be turned off
if [ -f /var/cfengine/policy_server.dat ]; then
        ps=$(cat /var/cfengine/policy_server.dat)
        echo " ${MODULE} : CFENGINE NOT RUNNING: FAIL "
else
        echo " ${MODULE} : CFENGINE NOT RUNNING : PASS"
fi
}
rootid()
{
local MODULE=rootid
# Check for the root home directory
RHOME=$(getent passwd root | awk -F':' '{ print $6}')
        if [ $RHOME != /root ] ; then
                echo " ${MODULE} : ROOTHOME : FAIL  "
        else
                echo " ${MODULE} : ROOTHOME : PASS  "
        fi
#
# Check for permit root login in SSH
if [ -f /usr/local/openssh/etc/sshd_config ]; then
        if [ "$(awk '/^PermitRoot/ {print $2}' /usr/local/openssh/etc/sshd_config | tr [A-Z] [a-z])" != "yes" ]; then
                echo " ${MODULE} : OPENSSH-ROOT LOGIN : PASS  "
    else
                echo " ${MODULE} : OPENSSH-ROOT LOGIN : FAIL  "
    fi
fi

if [ -f /etc/ssh/sshd_config ] ; then
        if [ "$(awk '/^PermitRoot/ {print $2}' /etc/ssh/sshd_config)" != "yes" ] ; then
                echo " ${MODULE} : SSH - ROOT LOGIN : PASS "
        else
                echo " ${MODULE} : SSH - ROOT LOGIN : FAIL "
        fi
fi
}
software()
{
local MODULE=software
#
#TO CHECK REQUIRED RPMS ARE INSTALLED
#
RPM_SCBROOT=$(rpm -q SCBrootsh |grep -v not  | awk '{print 1}')
RPM_SCBSUDO=$(rpm -q SCBsudo |grep -v not  | awk '{print 2}')
RPM_KEXECTOOLS=$(rpm -q kexec-tools |grep -v not  | awk '{print 3}')

case "$RHELVERSION" in
6.*)
        if [ "$RPM_SCBROOT"="1" ] && [ "$RPM_KEXECTOOLS"="3" ];
        then
        echo " ${MODULE} : Required Software: PASS"
        else
            echo " ${MODULE} : Required Software: FAIL"
                fi
        ;;
5.8|5.10)
        if [ "$RPM_SCBROOT"="1" ] && [ "$RPM_KEXECTOOLS"="3" ];
        then
        echo " ${MODULE} : Required Software: PASS"
        else
            echo " ${MODULE} : Required Software: FAIL"
                fi
        ;;
5.[1-7])
        if [ "$RPM_SCBROOT"="1" ] && [ "$RPM_SCBSUDO"="2" ] && [ "$RPM_KEXECTOOLS"="3" ];
        then
        echo " ${MODULE} : Required Software: PASS"
        else
            echo " ${MODULE} : Required Software: FAIL"
        fi
        ;;
4.*)
        if [ "$RPM_SCBROOT"="1" ] && [ "$RPM_SCBSUDO"="2" ];
        then
        echo " ${MODULE} : Required Software: PASS"
        else
            echo " ${MODULE} : Required Software: FAIL"
        fi
        ;;
esac

}
seatfile()
{
local MODULE=seatfile
case $(uname -s) in
AIX)
    GREP=/bin/egrep ;;
Linux)
    GREP=/bin/egrep ;;
SunOS)
    GREP=/usr/xpg4/bin/egrep ;;
esac
#
# TO CHECK THE EXISTANCE OF SEATFILE
#
SEAT_FILE="/etc/seatfile."`uname -n|cut -d. -f1`
if [ ! -f ${SEAT_FILE} ];
        then
                echo " ${MODULE} : Seatfile Exists: PASS"
    else
                echo " ${MODULE} : Seatfile Exists: FAIL"
fi
#
# TO CHECK IF THE DETAILS ARE HARD CODED
#
for r in Country Role App_Support
do
        CHECK_SEAT1=$($GREP ^${r}= $SEAT_FILE)
        CHECK_R=$r=
        if [ "$CHECK_SEAT1" = "$CHECK_R" ]
        then
                echo " ${MODULE} : $r Detail: FAIL"
        else
                echo " ${MODULE} : $r Detail: PASS"
    fi
done
#
# TO CHECK THE DATE FORMAT
#
for r in SAT_Completion_Date OAT_Completion_Date Handover_Date Go-live_Date
do
   _is_valid=0
    if $GREP "^${r}=[0-9]{8}$" $SEAT_FILE > /dev/null ; then
        set -- `$GREP ^${r}= $SEAT_FILE | sed 's/^.*=\(....\)\(..\)\(..\)$/\1 \2 \3/' | sed 's/ 0*/ /g'`
        if cal $2 $1 2> /dev/null | sed 2d | grep -w $3 > /dev/null ; then
   _is_valid=1
        echo " ${MODULE} : $r Date Format: PASS"
        fi
    fi
    if [ $_is_valid -eq 0 ]; then
                echo " ${MODULE} : $r Date Format: FAIL"
    fi
done
}
disks()
{
local MODULE=disks
#
hdlm()
{
if [ -x /opt/DynamicLinkManager/bin/dlnkmgr ] ; then
        hid=$(/opt/DynamicLinkManager/bin/dlnkmgr view -lu | grep -i serial | awk ' { print $NF }'| xargs)
# Check for Dead paths
        DP=$(dlnkmgr view -path 2 >/dev/null | egrep "Offline|Online\(E\)" | wc -l)
        if [ $DP -gt 0 ] ; then
                echo " ${MODULE} : HDLM DEAD PATHS : FAIL"
        else
                echo " ${MODULE} : HDLM DEAD PATHS : PASS"
        fi
# Check for HORCM file
	hrctrue=$(ps -eo args | sed -n -e 's/^horcmd_0*\([1-9]*[0-9]*[0-9]\)[ ]*$/\1/p' | sort -n | awk ' { print 1 }')
	if [ "$hrctrue" != 1 ] ; then
			echo " ${MODULE} : HORCM FILE : NA "
	else
			for HORCMID in $(ps -eo args | sed -n -e 's/^horcmd_0*\([1-9]*[0-9]*[0-9]\)[ ]*$/\1/p' | sort -n )
					do

                                if [ ! -f /etc/horcm${HORCMID}.conf ] ; then
                                        echo " ${MODULE} : HORCM FILE : FAIL "
                                else
                                        echo " ${MODULE} : HORCM FILE : PASS"
                                fi
                                if [ "$(sed -n '/^HORCM_CMD/,/^HORCM_/p' /etc/horcm${HORCMID}.conf | grep -v ^# | grep CMD-${hid} > /dev/null | wc -l)" > "0" ] ; then
                                        echo " ${MODULE} : CMD DEVICE : PASS "
                                else
                                        echo " ${MODULE} : CMD DEVICE : FAIL "
                                fi
			done
	fi
fi
}
# Check for EMC dead paths
emc()
{
    if [ -x /sbin/powermt ] ; then
                edp=$(/sbin/powermt display dev=all | grep '^ ' | grep -v active | wc -l)
                if [ $edp -gt 0 ] ; then
                        echo " ${MODULE} : EMC DEAD PATHS : FAIL "
                else
                        echo " ${MODULE} : EMC DEAD PATHS : PASS "
                fi
    fi
}
pvs_lvm()
{
# PV created out of a whole disk, not a slice
        err=0
                for disk in $(pvs | egrep '/dev/(sddlm|emcpower)' | awk ' { print $1 }')
                do
                        _retval=$(echo $disk | tr -cd '[[:digit:]]')
                        if [ ! -z $_retval ] ; then
                                        let " err = err + 1"
                        fi
                done
        if [ $err -eq 0 ] ; then
               echo " ${MODULE} : PV CREATED OUT OF WHOLE DISK : PASS"
        else
               echo " ${MODULE} : PV CREATED OUT OF WHOLE DISK : FAIL"
        fi
# LVM FILTER TEST
        if pvs 2>&1 | grep 'duplicate PV' > /dev/null ; then
                echo " ${MODULE} : LVM FILTER : FAIL "
        else
                echo " ${MODULE} : LVM FILTER : PASS"
        fi
}
# Get the HBA count
HBACOUNT=$(/opt/tss/bin/scbtools.py --show-hardware | grep -i Gbit | grep Online|wc -l) 
if [ $HBACOUNT -eq 0 ] ; then
		echo  " ${MODULE} : HBA COUNT : NA "
		echo " ${MODULE} : SAN ATTACHED : NA "
		pvs_lvm
elif [ $HBACOUNT -eq 1 ] ; then
		echo " ${MODULE} : HBA COUNT : FAIL"
		echo " ${MODULE} : SAN ATTACHED: PASS"
		pvs_lvm
		hdlm
		emc
else 
		echo " ${MODULE} : HBA COUNT  : PASS"
		echo" ${MODULE} : SAN ATTACHED : PASS"
		pvs_lvm
		hdlm
		emc
fi
#
}
fs()
{
local MODULE=fs
# Check for soft NFS mounts
if [ $(awk '( $3 == "nfs" && $4 ~ /^(.+,)*soft(,.+)*$/ )  { print $2 }' /proc/mounts | wc -l) -eq 0 ] ; then
        echo " ${MODULE} : NFS soft Mounts : PASS "
else
        echo " ${MODULE} : NFS soft Mount : FAIL "
fi
#
if [ $(awk '( $4 ~ /^(.+,)*ro(,.+)*$/ ) { print $2 }' /proc/mounts | wc -l ) -eq 0 ] ; then
        echo " ${MODULE} : Read Only Mount point : PASS "
else
        echo " ${MODULE} : Read Only Mount point : FAIL"
fi
}
sudo()
{
local MODULE=sudo
RHELVERSION=$(awk ' { print $(NF-1) }' /etc/redhat-release)
#
# TO CHECK SUDO BINARY EXISTS, TTY STATUS & EID MACRO
#
DISTADM_ID=${DISTADM_ID:="distadm1"}
#
if [ ${RHELVERSION%.*} -ge 6 ] || [ ${RHELVERSION} = "5.8" ] || [ ${RHELVERSION} = "5.10" ];
        then
                SUDO_BIN=/usr/bin/sudo
        else
                SUDO_BIN=/usr/local/sudo/bin/sudo
fi
if [ ! -x $SUDO_BIN ];
        then
                echo " ${MODULE} : SUDO Binary Exists: FAIL"
        elif $SUDO_BIN -l > /dev/null 2>&1 ;
                then
                        echo " ${MODULE} : SUDO Binary Exists: PASS"
                        SUDO_PID=${SUDO_PID:="infra1 infra2 emerg1 emerg2 $DISTADM_ID"}
                        DISTADM_TTY_ID=0
#                               set -- `$SUDO_BIN -l -U $DISTADM_ID | sed -n '/^Matching Defaults entries/,/^$/p' | sed 1d`
    while [ $# -ne 0 ]; do
        if echo $1 | grep '^requiretty' > /dev/null ; then
            DISTADM_TTY_ID=1
        elif echo $1 | grep '^!requiretty'> /dev/null ; then
            DISTADM_TTY_ID=0
        fi
#        shift
    done
    if [ $DISTADM_TTY_ID -eq 1 ];
                then
                        echo " ${MODULE} : Distadm TTY Exception: FAIL"
                else
                        echo " ${MODULE} : Distadm TTY Exception: PASS"
        fi

        for ID_CHECK in $SUDO_PID
    do
        if [ -n "$(awk -F: ' $1 == "'$ID_CHECK'" { print 1 }' /etc/passwd)" ];
                        then
                                sudo_l=$($SUDO_BIN -l -U $ID_CHECK 2> /dev/null)
                                if echo $sudo_l | grep '(ALL) NOPASSWD: ALL$' > /dev/null; then
                                        echo " ${MODULE} : EID $ID_CHECK macro: PASS"
                                else
                                        echo " ${MODULE} : EID $ID_CHECK macro: FAIL"
                                fi
        fi
    done
fi
#
# TO CHECK SYSLOG CONF STATUS FOR SECLOGHOST
#
if [ ${RHELVERSION%.*} -ge 6 ]; then
    SYSLOG_CONF=/etc/rsyslog.conf
else
    SYSLOG_CONF=/etc/syslog.conf
fi
SECLOG_REQ="
local4.notice
local5.notice
auth.*
authpriv.*
"
for I in $SECLOG_REQ
do
    found=0
    for J in $(grep -v '^#' $SYSLOG_CONF | grep '@secloghost$' | awk '{ print $1 }' | tr ';' ' ')
    do
        if [ "$I" = "$J" ]; then
            found=1
            break
        fi
    done
    if [ $found -eq 0 ];
                then
                        echo " ${MODULE} : $I log to secloghost: FAIL"
                else
                        echo " ${MODULE} : $I log to secloghost: PASS"
        fi
done
#
# TO CHECK SYSLOG HOST IP RESOLVE & IT IS AUTHORIZED
#
SECLOG_HOST=" 10.156.0.68 10.24.128.187 172.31.161.161 172.17.140.90 10.20.210.74 10.20.214.79 172.17.103.16 10.128.7.154 10.206.64.217 10.112.115.18 10.112.113.6 10.152.0.87 10.65.1.111 10.172.40.20 10.224.12.69 172.21.101.22 10.144.1.148 172.16.64.28 172.16.65.28 10.80.8.127 172.16.66.3 "
SECLOG_HOST_IP=$(perl -e 'use Socket; print inet_ntoa((gethostbyname("secloghost"))[4])' 2> /dev/null)
if [ ! -n "$SECLOG_HOST_IP" ];
        then
                echo " ${MODULE} : Secloghost IP Resolved: FAIL"
        else
                echo " ${MODULE} : Secloghost IP Resolved: PASS"
                if ! echo $SECLOG_HOST | xargs -n 1 | grep "^$SECLOG_HOST_IP$" > /dev/null ; then
                        echo " ${MODULE} : Authorized secloghost: FAIL"
                else
                        echo " ${MODULE} : Authorized secloghost: PASS"
                fi
fi
}
io_spof()
{
# support LVM2 only
local MODULE=io_spof ; export MODULE
emc()
{
        pdisk=$( echo $1 | sed 's/[0-9]*$//')
        ret=0
        if [ -x /sbin/powermt ] ; then
                ret=$(/sbin/powermt display dev=$pdisk | grep '^ ' | awk ' $6 == "active" { print $1 }' | sort | uniq -c | wc -l | xargs )
        fi
        if [ $ret -lt 2 ]; then
                return 1
        fi
}
hdlm()
{
        pdisk=$(echo $1|sed 's/[0-9]*$//')
        ret=0
        if [ -x /opt/DynamicLinkManager/bin/dlnkmgr ] ; then
                ret=$(/opt/DynamicLinkManager/bin/dlnkmgr view -path | awk ' $8 == "Online" && $NF == "'$pdisk'" { print 1 }' | wc -l | xargs)
        fi
        if [ $ret -lt 2 ]; then
                return 1
        fi
}
check_san_disk()
{
local disk=$1
case $disk in
        sddlm*)
                ret=$(hdlm $disk)
                rc=$?
                echo $ret
                return $rc
                ;;
        emcpower*)
                ret=$(emc $disk)
                rc=$?
                echo $ret
                return $rc
                ;;
esac
}
if ! rpm -q lvm2 > /dev/null 2>&1 ; then
        echo " ${MODULE} : LVM2 INSTALLED : FAIL "
        exit
else
        echo " ${MODULE} : LVM2 INSTALLED : PASS "
fi
err=0
for i in $(pvs 2> /dev/null|sed '1d'|awk '{print $1",VG="$2";PV="}')
do
        disk=$(echo $i | cut -d, -f1 | cut -d/ -f3)
        info=$(check_san_disk $disk)
        check_rc=$?

        case $disk in
                sddlm*|emcpower*)
                if [ $check_rc -ne 0 ] ; then
                        let "err +=1 "
                fi
        esac
done
        if [ $err -eq 0 ] ; then
                echo " ${MODULE} : SAN PATHS MORE THAN ONE : PASS "
        else
                echo " ${MODULE}: SAN PATHS MORE THAN ONE : FAIL"
        fi
# Check for VxDMP Dual paths
if [ -f /opt/VRTS/bin/vxdg ] ; then
vx=0
for DG in $(vxdg list 2> /dev/null | sed '1d' | awk '  { print $1 }')
do
        for DM in $(vxprint -g $DG  | awk ' $1 == "dm" && $3 != "-" {print $3}')
        do
                numpaths=$(vxdisk list $DM | grep '^numpaths:' | awk -F: ' { print $2 }')
                if [ $numpaths -lt 2 ];
                then
                        pdname=$(vxdisk list $DM | sed -n '/^numpaths:/,$p' | sed 2p | awk '{print $2}')
                        if ! echo $pdname | egrep  '^(sddlm|emcpower)' > /dev/null ; then
                                let 'vx += 1'
                        fi
                fi
        done
done
if [ $vx -ne 0 ] ; then
                echo " ${MODULE} : VxDMP TWO PATHS : FAIL "
else
                echo " ${MODULE} : VxDMP TWO PATHS : PASS"
fi
else
        echo " ${MODULE} : VxDMP TWO PATH : NA "
fi
}
nic()
{
# Linux OS NIC's are from the in-built card ?  ( Can be kept at last, but will be intersting to find out )
local MODULE=NIC
interface_with_ip=0
link_detected=0
duplex=0
speed=0
for interface in $(ifconfig -a | grep '^[a-z]' | grep -v '^lo'|cut -d\; -f1|cut -d: -f1|grep Link | cut -d: -f1 | sort | uniq | awk ' { print $1 }')
do
        ipaddr=$(ifconfig $interface | grep inet | awk ' {print $2}' | awk -F: ' { print $2}')
        netmask=$(ifconfig $interface | grep inet | awk ' {print $4}' | awk -F: ' { print $2}')
        if [ -n "$ipaddr" -a "$ipaddr" != "0.0.0.0" ] ; then
                if [ -n "$(echo $interface | grep '^bond[0-9]')" ] ; then
                                ifs=$(cat /sys/class/net/${interface}/bonding/slaves)
                                mode=$(grep 'Bonding Mode' /proc/net/bonding/${interface})
                else
                                let ' interface_with_ip += 1'
                                ifs=${interface}
                fi
##
                for i in ${ifs}
                do
                        if ! ethtool $i 2>/dev/null | grep 'Link detected: yes' > /dev/null ; then
                                let 'link_detected += 1'
                        fi
                port_opt=$(ethtool $i | egrep 'Speed:|Duplex:|Auto-negotiation:' | xargs)
                        if ! echo $port_opt | grep -i full > /dev/null ; then
                                let 'duplex += 1'
                        fi
                        if ! echo $port_opt | egrep 'Speed: 1000Mb/s' | grep ': off' > /dev/null ; then
                                let 'speed += 1'
                        fi
                done
        fi
done
if [ $interface_with_ip -gt 0 ] ; then
                echo " ${MODULE} : BONDING : FAIL "
else
                echo " ${MODULE} : BONDING : PASS"
fi
#
if [ $link_detected -gt 0 ] ; then
        echo " ${MODULE} : LINK : FAIL "
else
        echo " ${MODULE} : LINK : PASS"
fi
#
if [ $duplex -gt 0 ] ; then
        echo "${MODULE} : DUPLEX : FAIL "
else
        echo "${MODULE} : DUPLEX : PASS"
fi
#
if [ $speed -gt 0 ] ; then
        echo "${MODULE} :  SPEED : FAIL "
else
        echo " ${MODULE} : SPEED : PASS "
fi
}
yum()
{
local MODULE=Yum
#TO CHECK YUM UTILITY IS INSTALLED
RHELVERSION=$(awk ' { print $(NF-1) }' /etc/redhat-release )
YUM_RPM=$(rpm -q yum | grep -v not  | awk '{print 1}')
#
if [ "$YUM_RPM" = 1 ];
    then
        echo " ${MODULE} : YUM Utility Installed: PASS"
    else
        echo " ${MODULE} : YUM Utility Installed: FAIL"
fi
#
# TO CHECK VM SERVER OR NOT
#
if dmidecode | grep 'Product Name' | grep 'VMware' > /dev/null ;
        then
                vmguest=1
    else
                vmguest=0
fi
#
#TO CHECK KICKSTART SERVER IP'S ARE GET RESOLVED#
#
KS_SERVER="10.193.30.196 10.192.86.11"
#KS_IP=" "
for i in $KS_SERVER
do
KS_IP=$(getent hosts $i | awk '{print 1}')
        if [ "$KS_IP" != 1 ] ;
                then
                        echo " ${MODULE} : Kickstart IP Resolution: FAIL"
                        echo " ${MODULE} : YUM base Repo: FAIL"
                        echo " ${MODULE} : YUM errata Repo: FAIL"
                        echo " ${MODULE} : YUM scbutils Repo: FAIL"
                        echo " ${MODULE} : YUM dell Repo: FAIL"
                        exit
        fi
done
            echo " ${MODULE} : Kickstart IP Resolution: PASS"
#
# TO CHECK REPOS ARE CONFIGURED
#
if [ ${RHELVERSION%.*} -ge 6 ] ; then
        PBASE_1='http://linuxks.gdc.standardchartered.com/$releasever/$release/$basearch'
        PBASE_2='http://dbvdev4124.uk.standardchartered.com/$releasever/$release/$basearch'
else
        PBASE_1='http://linuxks.gdc.standardchartered.com/$releasever/$YUM0/$basearch'
        PBASE_2='http://dbvdev4124.uk.standardchartered.com/$releasever/$YUM0/$basearch'
fi
for j in base errata scbutils
do
YUM_REPOLIST=$(/usr/bin/yum -v repolist 2>/dev/null |grep Repo-id |grep $j | awk '{ print $NF }' | awk '{print 1}')
PBASE_1_CHECK=$(grep $PBASE_1/$j /etc/yum.repos.d/$j.mirror | awk '{print 2}')
PBASE_2_CHECK=$(grep $PBASE_2/$j /etc/yum.repos.d/$j.mirror | awk '{print 3}')
        if [ "$YUM_REPOLIST" = 1 ] && [ "$PBASE_1_CHECK" = 2 ] && [ "$PBASE_2_CHECK" = 3 ] ;
                then
                                echo " ${MODULE} : YUM $j Repo: PASS"
                else
                                echo " ${MODULE} : YUM $j Repo: FAIL"
        fi
done
#
# TO CHECK THE DELL REPO STATUS FOR PHYSICAL HOST
#
for k in dell
do
PBASE_1_CHECK=$(grep $PBASE_1/$k /etc/yum.repos.d/$k.mirror | awk '{print 2}')
PBASE_2_CHECK=$(grep $PBASE_2/$k /etc/yum.repos.d/$k.mirror | awk '{print 3}')
YUM_REPOLIST=$(/usr/bin/yum -v repolist 2>/dev/null |grep Repo-id |grep $k | awk '{ print $NF }' | awk '{print 1}')
if [ "$vmguest" = 0 ];
    then
        if [ "$YUM_REPOLIST" = 1 ]  && [ "$PBASE_1_CHECK" = 2 ] && [ "$PBASE_2_CHECK" = 3 ] ;
                then
                                echo " ${MODULE} : YUM $k Repo: PASS"
        fi
        else
                                echo " ${MODULE} : YUM $k Repo: NA"
fi
done
}
vxlic()
{
local MODULE=vxlic
# CHECK FOR VX
if [ ! -x /sbin/vxlicrep ] ; then
        echo " ${MODULE} : VX LICENSE : NA "
else
	vxlicense=$(perl /opt/sysadmin/SCBoschk/sub/readVxLic.pl 2>/dev/null| grep DEMO | wc -l )
# VX PERM LICENSE
	if [ $vxlicense -eq 0 ] ; then
        	echo " ${MODULE} : VX PERM LICENSE : PASS"
	else
        	echo " ${MODULE}: VX PERM LICENSE : FAIL"
	fi
fi
#
# VX DR FEATURE
if [ ! -x /opt/VRTSvcs/bin/hares ] ; then
	echo " ${MODULE} : VX DR FEATURE : NA "
else
	for i in HTC SRDF
	do
        	DR=$(hares -list Type=$i -localclus |  awk ' $2 == "'${HOSTNAME}'" {print $1 }' | wc -l)
	        if [ $DR -ne 0 ] ; then
        	        VCS_DR=$(hasys -value ${HOSTNAME} VCSFeatures 2> /dev/null)
                		if ! expr "$VCS_DR" : DR > /dev/null ; then
		                        echo " ${MODULE} : VCS DR FEATURE : FAIL"
                		else
		                        echo " ${MODULE} : VCS DR FEATURE: PASS"
                		fi
	        fi
	done
fi
}
nss()
{
local MODULE=nss
err=0
set -- $(egrep '^hosts:[         ]' /etc/nsswitch.conf 2> /dev/null | tail -1)
if [ $# -le 1 ] ; then
        echo " ${MODULE} : HOSTS SETUP : FAIL"
else
        echo " ${MODULE} : HOSTS SETUP : PASS"
fi
shift
if [ "$1" != "files" ] ; then
        echo " ${MODULE} : HOSTS WITH FILES : FAIL "
        err=1
else
        echo " ${MODULE}: HOSTS WITH FILES: PASS"
fi
while [ $# -gt 0 ];
do
        if echo $1 | egrep '^(files|dns)' > /dev/null ; then
                echo " ${MODULE} : HOSTS with $1 : PASS "
        else
                echo " ${MODULE} : HOSTS with $1 : FAIL "
                let ' err += 1'
        fi
        shift
done
#
if [ -n "$(ypwhich 2> /dev/null)" ] ; then
        if ! egrep '^passwd:[       ]+compat' /etc/nsswitch.conf > /dev/null 2>&1 ; then
                echo " ${MODULE} : passwd:compat : FAIL"
                err=1
        else
                echo " ${MODULE} : passwd:compat : PASS"
        fi
fi
#
if [ $err -eq 0 ] ; then
        echo " ${MODULE} : FILE NSSWITCH : PASS "
fi
}
ntp()
{
#
# TO CHECK VALID DOMAIN NAME IS SET BY DEFAULT
#
TM_ZONE=$(grep '^ZONE=' /etc/sysconfig/clock | cut -d= -f2-)
DNS_DOMAIN=$( egrep '^domain[      ]' /etc/resolv.conf  |tail -1 | awk '{print $2}' | sed -e 's|standardchartered\.com||' -e 's|\.$||')
if [ -n "${DNS_DOMAIN}" ];
        then
                if [ "${DNS_DOMAIN}" = "gdc" ];
                        then
                        DNS_DOMAIN="uk"
                fi
                        echo " NTP : TZ - Domain Set: PASS"
        else
                        echo " NTP : TZ - Domain Set: FAIL"
fi
#
#TO CHECK ON NTP STANDARD SERVER AVAILABILITY ON NTP SERVER LIST
#
NTP_SERVER=/opt/sysadmin/SCBoschk/inc/ntpserver
REQ_NTP_SERVER=$( awk -F, ' $2 == loc { print $5, $7 } ' loc=$DNS_DOMAIN $NTP_SERVER | xargs -n 1 | sort | xargs )
NTP_profile=$( awk -F, ' $2 == loc { print $1 ", " $3 } ' loc=$DNS_DOMAIN $NTP_SERVER  | awk '{print 1}')
loc=$(echo $DNS_DOMAIN)
if [ ! -n "$REQ_NTP_SERVER"  ];
    then
        echo " NTP : NTP Std Server Availability: FAIL"
    else
        echo " NTP : NTP Std Server Availability: PASS"
fi
#
# TO CHECK A VALID TIME ZONE IS SET @/etc/sysconfig/clock:
#
if [ ! -n "$TM_ZONE" ];
        then
        #   info "Timezone Env TM_ZONE not set at /etc/sysconfig/clock, system default is GMT"
                TM_ZONE=GMT
                echo " NTP : TimeZone @/etc/sysconfig/clock: FAIL"
        else
                echo " NTP : TimeZone @/etc/sysconfig/clock: PASS"
fi
#
#TO CHECK /usr/share/zoneinfo FILE EXISTS AND /etc/sysconfig/clock & /etc/localtime ARE IN SYNC
#
if [ ! -f /usr/share/zoneinfo/$TM_ZONE ]; then
    warn "ZONE setting in /etc/sysconfig/clock is invalid, file /usr/share/zoneinfo/$ZONE not found." 9 x_timezone_wrong "" 1.1.13
        echo " NTP : TZ file @/usr/share/zoneinfo: FAIL"
elif ! cmp /usr/share/zoneinfo/$TM_ZONE /etc/localtime > /dev/null ; then
    warn "ZONE at /etc/sysconfig/clock and /etc/localtime is not in sync" 8 x_timezone_setup_aync "" 1.1.10
                echo " NTP : TZ /etc/sysconfig/clock & /etc/localtime sync: FAIL"
        else
                echo " NTP : TZ file @/usr/share/zoneinfo: PASS"
                echo " NTP : TZ /etc/sysconfig/clock & /etc/localtime sync: PASS"
fi
#
# TO CHECK NTD STANDARD SERVERS ARE USED IN CONFIG
#
NTP_CONF=/etc/ntp.conf
NTP_SERVER=$(grep '^server' $NTP_CONF 2> /dev/null | awk '{print $2}' | sort | xargs)

if [ "$NTP_SERVER" != "$REQ_NTP_SERVER" ];
                then
                        echo " NTP : Std. NTP IP @ntp.conf: FAIL"
                else
                        echo " NTP : Std. NTP IP @ntp.conf: PASS"
fi
#
# TO CHECK NTP IS IN SYNC WITH A NTP SOURCE & NTPD IS RUNNING
#
NTP_CHECK1=$(ps -ef | grep -v grep | grep ntpd | awk '{print 1}' 2> /dev/null)

if [ "$NTP_CHECK1" != 1 ];
    then
                echo " NTP : NTPD Running: FAIL"
        else
                echo " NTP : NTPD Running: PASS"

                NTP_SYS=$(ntpq -pn | grep '^*' | awk '{print $1","$3}' | sed 's/^.//' 2> /dev/null )
                NTP_SYS_SERVER=$(echo $NTP_SYS|cut -d, -f1)

                if [ -n "$NTP_SYS_SERVER" ];
                then
                        echo " NTP : Server Set to Sync: PASS"
                else
                        echo " NTP : Server Set to Sync: FAIL"
                fi
fi
#
# TO CHECK ON NTP Q DRIFT
#
NTP_SOURCE=$(echo $REQ_NTP_SERVER|awk '{print $1}')
NTP_DRIFT=$(ntpdate -q $NTP_SOURCE 2> /dev/null | sed -n -e '/time server/s/^.*offset -*\([0-9.]*\).*$/\1/p')
if [ ! -n "$NTP_DRIFT" ];
        then
                echo " NTP : NTPD Q Drift: FAIL"
        else
                AD_DRIFT=$(/usr/bin/dc  2> /dev/null <<eof\ $NTP_DRIFT\ 1000\ *\ p\ eof)
                AD_DRIFT_1=$(echo $AD_DRIFT | awk '{printf "%f", $0}' |awk -F\. '{print $1}')
        if [ "$AD_DRIFT_1" -ge 50 ];
                then
                        echo " NTP : NTPD Q Drift: FAIL"
                else
                        echo " NTP : NTPD Q Drift: PASS"
    fi
fi
}
sysinfo()
{
#
# TO CHECK VM SERVER OR NOT
#
HOSTNAME=`uname -n|cut -d. -f1`
#
# TO CHECK SCB BUILD SIGNATURE IS AVAILABLE
#
BUILD_SIG=$(cd /etc ; ls -1at .RHEL* 2> /dev/null |head -1 | sed 's/^.//')
if [ -n "$BUILD_SIG" ]; 
	then
		echo " Sysinfo : SCB Build signature: PASS"
	else
		echo " Sysinfo : SCB Build signature: FAIL"
fi
#
# TO CHECK HOSTNAME FOLLOWS STANDARD NAMING SCHEME
#
# Check HOSTNAME syntax
if [ -n "$BUILD_SIG" ] && echo "$BUILD_SIG" | grep 'OneE' > /dev/null ; 
	then
#    # OneE Skip HOSTNAME check
		echo " Sysinfo : Hostname follows Std. Naming: NA"
	else
		PATTERN='^..[als][pv][aid][pdtu][a-z][a-z0-9][a-z0-9][0-9][0-9][ab]*$'	
		if echo $HOSTNAME | egrep "$PATTERN" > /dev/null ; 
			then
				echo " Sysinfo : Hostname follows Std. Naming: PASS"
			else
				echo " Sysinfo : Hostname follows Std. Naming: FAIL"
		fi
fi
#
# TO CHECK THE CONSOLE IP IS REGISTERED IN DNS
#
if [ $vmguest -eq 0 ]; 
	then
		CONSOLE_IP_DNS=`echo $HOSTNAME | cut -c1-4`m`echo $HOSTNAME | cut -c6-`
		CONSOLE_IP_ADDR=$(/usr/bin/nslookup $CONSOLE_IP_DNS 2> /dev/null|sed '1,3d'|grep '^Address'|awk '{print $NF}')
            
		if [ -n "$CONSOLE_IP_ADDR" ]; 
			then
				echo " Sysinfo : iDRAC Avail. in DNS: PASS"
            else
				echo " Sysinfo : iDRAC Avail. in DNS: FAIL"
        fi
	else
		echo " Sysinfo : iDRAC Avail. in DNS: FAIL"
fi
#
# TO CHECK HOSTNAME IS IN LOWERCASE
#
HOST_LOWER=$(echo $HOSTNAME | egrep '[ABCDEFGHIJKLMNOPQRSTUVWXYZ]'| awk '{print 1}')
if  [ "$HOST_LOWER" = 1 ]; 
	then
		echo " Sysinfo : Hostname in Lowercase: FAIL"
	else
		echo " Sysinfo : Hostname in Lowercase: PASS"
fi
#
# TO CHECK HOSTNAME IS NOT WITH FQDN @/etc/sysconfig/network
#
HOST_FQDN=$(grep HOSTNAME /etc/sysconfig/network |grep '\.' 2> /dev/null)
if [ ! -f "$HOST_FQDN"] ; 
	then
		echo " Sysinfo : Hostname is not FQDN: FAIL"
	else
		echo " Sysinfo : Hostname is not FQDN: PASS"
fi
#
# TO CHECK WHETHER RHEL 32BIT WITH PAE KERNEL IS INSTALLED
#
KERNEL_REL=$(uname -r|cut -d- -f1)
EXI_ARCHI=$(uname -i)

if [ "$KERNEL_REL" = "2.6.18" -a "$EXI_ARCHI" = "i386" ]; 
	then
	KERNEL_RPM=$(rpm -qa | grep 'kernel-PAE' |grep -v not  | awk '{print 1}')
	if [ "$KERNEL_RPM" = 1 ];
		then
			echo " Sysinfo : No RHEL-32bits with PAE Installed: FAIL"
		else
			echo " Sysinfo : No RHEL-32bits with PAE Installed: PASS"
	fi	
	else
		echo " Sysinfo : No RHEL-32bits with PAE Installed: PASS"
fi	
}
resolver()
{
local MODULE=resolver
need_resolver=0
# Check for DNS name resolution
if ! egrep '^hosts:[  ]+' /etc/nsswitch.conf 2> /dev/null | tail -1 | grep -w dns > /dev/null 2>&1 ; then
	echo " ${MODULE} : DNS RESOLVING IN NSS : FAIL"
else
	echo " ${MODULE} : DNS RESOLVING IN NSS : PASS"
fi
# Check if resolv.conf is present
if [ ! -f /etc/resolv.conf ] ; then
	echo " ${MODULE} : RESOLV.CONF : FAIL"
fi
# Check DNS server in resolv.conf
nslist=$(awk ' $1 == "nameserver" { print $2 }' /etc/resolv.conf|xargs)
if [ ! -n "$nslist" ]; then
    echo " ${MODULE}:  DNS server defined :  FAIL"
else
	echo " ${MODULE} : DNS server defined : PASS"
fi
# Check DNS Domain in resolv.conf
dnsdomain=$(awk ' $1 == "domain" || $1 == "search" { print $2 }' /etc/resolv.conf | tail -1)
if [ -z "$dnsdomain" ]; then
    echo " ${MODULE} : DNS DOMAIN DEFINED : FAIL "
else
    echo " ${MODULE} : DNS DOMAIN DEFINED : PASS"
fi
# Check for no of  DNS servers
no_ns=$(echo $nslist|xargs -n 1|wc -l|xargs)
if [ $no_ns -lt 3 ] ; then
	echo " ${MODULE} : No of DNS servers : FAIL "
else
	echo " ${MODULE} : No of DNS servers : PASS"
fi
# 
#
}
nic
vxlic
nss
yum
disks
ntp
fs
io_spof
sudo
services
sysinfo
resolver
seatfile
software
rootid
hardware
monitoring
kdump_coredump
swap
NIS